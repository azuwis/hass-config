diff -Nur a/custom_components/smartir/climate.py b/custom_components/smartir/climate.py
--- a/custom_components/smartir/climate.py
+++ b/custom_components/smartir/climate.py
@@ -32,6 +32,7 @@
 CONF_DELAY = "delay"
 CONF_TEMPERATURE_SENSOR = 'temperature_sensor'
 CONF_HUMIDITY_SENSOR = 'humidity_sensor'
+CONF_MODE_SENSOR = 'mode_sensor'
 CONF_POWER_SENSOR = 'power_sensor'
 CONF_POWER_SENSOR_RESTORE_STATE = 'power_sensor_restore_state'
 
@@ -48,6 +49,7 @@
     vol.Optional(CONF_DELAY, default=DEFAULT_DELAY): cv.positive_float,
     vol.Optional(CONF_TEMPERATURE_SENSOR): cv.entity_id,
     vol.Optional(CONF_HUMIDITY_SENSOR): cv.entity_id,
+    vol.Optional(CONF_MODE_SENSOR): cv.entity_id,
     vol.Optional(CONF_POWER_SENSOR): cv.entity_id,
     vol.Optional(CONF_POWER_SENSOR_RESTORE_STATE, default=False): cv.boolean
 })
@@ -102,6 +104,7 @@
         self._delay = config.get(CONF_DELAY)
         self._temperature_sensor = config.get(CONF_TEMPERATURE_SENSOR)
         self._humidity_sensor = config.get(CONF_HUMIDITY_SENSOR)
+        self._mode_sensor = config.get(CONF_MODE_SENSOR)
         self._power_sensor = config.get(CONF_POWER_SENSOR)
         self._power_sensor_restore_state = config.get(CONF_POWER_SENSOR_RESTORE_STATE)
 
@@ -118,6 +121,10 @@
         self._operation_modes = [HVAC_MODE_OFF] + valid_hvac_modes
         self._fan_modes = device_data['fanModes']
         self._swing_modes = device_data.get('swingModes')
+        if 'offFlags' in device_data:
+            self._off_flags = device_data['offFlags']
+        else:
+            self._off_flags = []
         self._commands = device_data['commands']
 
         self._target_temperature = self._min_temperature
@@ -182,6 +189,10 @@
             if humidity_sensor_state and humidity_sensor_state.state != STATE_UNKNOWN:
                 self._async_update_humidity(humidity_sensor_state)
 
+        if self._mode_sensor:
+            async_track_state_change(self.hass, self._mode_sensor,
+                                     self._async_mode_sensor_changed)
+
         if self._power_sensor:
             async_track_state_change(self.hass, self._power_sensor, 
                                      self._async_power_sensor_changed)
@@ -363,7 +374,14 @@
                 target_temperature = '{0:g}'.format(self._target_temperature)
 
                 if operation_mode.lower() == HVAC_MODE_OFF:
-                    await self._controller.send(self._commands['off'])
+                    command = self._commands['off']
+                    if 'operation' in self._off_flags:
+                        command = command[self._last_on_operation]
+                    if 'fan' in self._off_flags:
+                        command = command[fan_mode]
+                    if 'temperature' in self._off_flags:
+                        command = command[target_temperature]
+                    await self._controller.send(command)
                     return
 
                 if 'on' in self._commands:
@@ -396,6 +414,16 @@
         self._async_update_humidity(new_state)
         await self.async_update_ha_state()
 
+    async def _async_mode_sensor_changed(self, entity_id, old_state, new_state):
+        """Handle mode sensor changes."""
+        if new_state is None:
+            return
+
+        self._hvac_mode = new_state.state
+        # if not self._hvac_mode == STATE_OFF:
+        #     self._last_on_operation = operation_mode
+        await self.async_update_ha_state()
+
     async def _async_power_sensor_changed(self, entity_id, old_state, new_state):
         """Handle power sensor changes."""
         if new_state is None:
