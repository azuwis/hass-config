diff -Nur a/custom_components/smartir/climate.py b/custom_components/smartir/climate.py
--- a/custom_components/smartir/climate.py	2020-05-21 15:36:21.529649649 +0800
+++ b/custom_components/smartir/climate.py	2020-05-21 15:37:37.944450458 +0800
@@ -30,6 +30,7 @@
 CONF_CONTROLLER_DATA = "controller_data"
 CONF_TEMPERATURE_SENSOR = 'temperature_sensor'
 CONF_HUMIDITY_SENSOR = 'humidity_sensor'
+CONF_MODE_SENSOR = 'mode_sensor'
 CONF_POWER_SENSOR = 'power_sensor'
 
 SUPPORT_FLAGS = (
@@ -44,6 +45,7 @@
     vol.Required(CONF_CONTROLLER_DATA): cv.string,
     vol.Optional(CONF_TEMPERATURE_SENSOR): cv.entity_id,
     vol.Optional(CONF_HUMIDITY_SENSOR): cv.entity_id,
+    vol.Optional(CONF_MODE_SENSOR): cv.entity_id,
     vol.Optional(CONF_POWER_SENSOR): cv.entity_id
 })
 
@@ -96,6 +98,7 @@
         self._controller_data = config.get(CONF_CONTROLLER_DATA)
         self._temperature_sensor = config.get(CONF_TEMPERATURE_SENSOR)
         self._humidity_sensor = config.get(CONF_HUMIDITY_SENSOR)
+        self._mode_sensor = config.get(CONF_MODE_SENSOR)
         self._power_sensor = config.get(CONF_POWER_SENSOR)
 
         self._manufacturer = device_data['manufacturer']
@@ -110,6 +113,10 @@
 
         self._operation_modes = [HVAC_MODE_OFF] + valid_hvac_modes
         self._fan_modes = device_data['fanModes']
+        if 'offFlags' in device_data:
+            self._off_flags = device_data['offFlags']
+        else:
+            self._off_flags = []
         self._commands = device_data['commands']
 
         self._target_temperature = self._min_temperature
@@ -163,6 +170,10 @@
             if humidity_sensor_state and humidity_sensor_state.state != STATE_UNKNOWN:
                 self._async_update_humidity(humidity_sensor_state)
 
+        if self._mode_sensor:
+            async_track_state_change(self.hass, self._mode_sensor,
+                                     self._async_mode_sensor_changed)
+
         if self._power_sensor:
             async_track_state_change(self.hass, self._power_sensor, 
                                      self._async_power_sensor_changed)
@@ -327,7 +338,14 @@
                 target_temperature = '{0:g}'.format(self._target_temperature)
 
                 if operation_mode.lower() == HVAC_MODE_OFF:
-                    await self._controller.send(self._commands['off'])
+                    command = self._commands['off']
+                    if 'operation' in self._off_flags:
+                        command = command[self._last_on_operation]
+                    if 'fan' in self._off_flags:
+                        command = command[fan_mode]
+                    if 'temperature' in self._off_flags:
+                        command = command[target_temperature]
+                    await self._controller.send(command)
                     return
 
                 if 'on' in self._commands:
@@ -356,6 +374,16 @@
         self._async_update_humidity(new_state)
         await self.async_update_ha_state()
 
+    async def _async_mode_sensor_changed(self, entity_id, old_state, new_state):
+        """Handle mode sensor changes."""
+        if new_state is None:
+            return
+
+        self._hvac_mode = new_state.state
+        # if not self._hvac_mode == STATE_OFF:
+        #     self._last_on_operation = operation_mode
+        await self.async_update_ha_state()
+
     async def _async_power_sensor_changed(self, entity_id, old_state, new_state):
         """Handle power sensor changes."""
         if new_state is None:
@@ -387,4 +415,4 @@
             if state.state != STATE_UNKNOWN:
                 self._current_humidity = float(state.state)
         except ValueError as ex:
-            _LOGGER.error("Unable to update from humidity sensor: %s", ex)
\ No newline at end of file
+            _LOGGER.error("Unable to update from humidity sensor: %s", ex)
